package hahaha.controller;

import hahaha.service.CheckpointRecoveryService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Map;

/**
 * REST Controller cho Checkpoint Recovery System
 * H·ªá th·ªëng Qu·∫£n l√Ω Ph√≤ng Gym
 */
@RestController
@RequestMapping("/api/checkpoint")
@CrossOrigin(origins = "*")
public class CheckpointController {

    @Autowired
    private CheckpointRecoveryService checkpointService;

    /**
     * Demo ƒë·∫ßy ƒë·ªß h·ªá th·ªëng Checkpoint Recovery
     */
    @PostMapping("/demo")
    public ResponseEntity<Map<String, Object>> fullDemo() {
        try {
            Map<String, Object> result = checkpointService.fullDemo();
            return ResponseEntity.ok(Map.of(
                "title", "üéØ DEMO CHECKPOINT RECOVERY - H·ªÜ TH·ªêNG QU·∫¢N L√ù PH√íNG GYM",
                "description", "M√¥ ph·ªèng ƒë·∫ßy ƒë·ªß quy tr√¨nh: Checkpoint ‚Üí S·ª± c·ªë ‚Üí Recovery",
                "demo_result", result,
                "conclusion", Map.of(
                    "method", "Checkpoint Recovery",
                    "suitability", "Ph√π h·ª£p cho h·ªá th·ªëng gym v√¨ ƒë∆°n gi·∫£n, hi·ªáu qu·∫£",
                    "key_benefits", "D·ªÖ hi·ªÉu, d·ªÖ b·∫£o tr√¨, recovery nhanh"
                )
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Demo failed: " + e.getMessage()));
        }
    }

    /**
     * T·∫°o checkpoint th·ªß c√¥ng
     */
    @PostMapping("/create")
    public ResponseEntity<Map<String, Object>> createCheckpoint() {
        try {
            Map<String, Object> result = checkpointService.createCheckpoint();
            return ResponseEntity.ok(Map.of(
                "action", "T·∫°o Checkpoint",
                "result", result,
                "message", "Checkpoint ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng"
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Failed to create checkpoint: " + e.getMessage()));
        }
    }

    /**
     * Th·ª±c hi·ªán recovery
     */
    @PostMapping("/recover")
    public ResponseEntity<Map<String, Object>> performRecovery(@RequestParam(required = false) Integer checkpointId) {
        try {
            Map<String, Object> result = checkpointService.performRecovery(checkpointId);
            return ResponseEntity.ok(Map.of(
                "action", "Th·ª±c hi·ªán Recovery", 
                "result", result,
                "message", checkpointId != null ? 
                    "Recovery t·ª´ checkpoint " + checkpointId + " ho√†n t·∫•t" :
                    "Recovery t·ª´ checkpoint g·∫ßn nh·∫•t ho√†n t·∫•t"
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Recovery failed: " + e.getMessage()));
        }
    }

    /**
     * M√¥ ph·ªèng s·ª± c·ªë
     */
    @PostMapping("/crash")
    public ResponseEntity<Map<String, Object>> simulateCrash() {
        try {
            Map<String, Object> result = checkpointService.simulateCrash();
            return ResponseEntity.ok(Map.of(
                "action", "M√¥ ph·ªèng S·ª± c·ªë",
                "result", result,
                "message", "S·ª± c·ªë h·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c m√¥ ph·ªèng th√†nh c√¥ng"
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Crash simulation failed: " + e.getMessage()));
        }
    }

    /**
     * L·∫•y tr·∫°ng th√°i h·ªá th·ªëng
     */
    @GetMapping("/status")
    public ResponseEntity<Map<String, Object>> getSystemStatus() {
        try {
            Map<String, Object> result = checkpointService.getSystemStatus();
            return ResponseEntity.ok(Map.of(
                "system_status", result,
                "timestamp", java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Failed to get system status: " + e.getMessage()));
        }
    }

    /**
     * L·∫•y danh s√°ch checkpoint
     */
    @GetMapping("/list")
    public ResponseEntity<Map<String, Object>> getCheckpoints() {
        try {
            var checkpoints = checkpointService.getCheckpoints();
            return ResponseEntity.ok(Map.of(
                "checkpoints", checkpoints,
                "total_count", checkpoints.size(),
                "message", "Danh s√°ch 20 checkpoint g·∫ßn nh·∫•t"
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Failed to get checkpoints: " + e.getMessage()));
        }
    }

    /**
     * L·∫•y metrics v√† th·ªëng k√™
     */
    @GetMapping("/metrics")
    public ResponseEntity<Map<String, Object>> getMetrics() {
        try {
            Map<String, Object> result = checkpointService.getRecoveryMetrics();
            return ResponseEntity.ok(Map.of(
                "metrics", result,
                "description", "Th·ªëng k√™ hi·ªáu su·∫•t Checkpoint Recovery System",
                "generated_at", java.time.LocalDateTime.now().format(
                    java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"))
            ));
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Failed to get metrics: " + e.getMessage()));
        }
    }

    /**
     * Scenarios c·ª• th·ªÉ cho presentation
     */
    @PostMapping("/scenario/{type}")
    public ResponseEntity<Map<String, Object>> runScenario(@PathVariable String type) {
        try {
            Map<String, Object> result;
            
            switch (type.toLowerCase()) {
                case "cao-diem":
                    result = runPeakHourScenario();
                    break;
                case "thanh-toan":
                    result = runPaymentScenario();
                    break;
                case "bao-tri":
                    result = runMaintenanceScenario();
                    break;
                default:
                    return ResponseEntity.badRequest()
                        .body(Map.of("error", "Unknown scenario type: " + type));
            }
            
            return ResponseEntity.ok(result);
            
        } catch (Exception e) {
            return ResponseEntity.internalServerError()
                .body(Map.of("error", "Scenario failed: " + e.getMessage()));
        }
    }

    /**
     * API t·ªïng quan v·ªÅ Checkpoint Recovery
     */
    @GetMapping("/overview")
    public ResponseEntity<Map<String, Object>> getOverview() {
        return ResponseEntity.ok(Map.of(
            "title", "üèãÔ∏è‚Äç‚ôÇÔ∏è H·ªÜ TH·ªêNG CHECKPOINT RECOVERY - QU·∫¢N L√ù PH√íNG GYM",
            "method", "Checkpoint Recovery Only",
            "description", "H·ªá th·ªëng ph·ª•c h·ªìi d·ªØ li·ªáu ƒë∆°n gi·∫£n, hi·ªáu qu·∫£ cho ph√≤ng gym",
            
            "how_it_works", Map.of(
                "step1", "üìÅ T·∫°o Checkpoint: Backup to√†n b·ªô d·ªØ li·ªáu quan tr·ªçng",
                "step2", "üìù Ghi Log: Theo d√µi c√°c transaction ƒë√£ commit sau checkpoint",
                "step3", "‚ö° Khi c√≥ s·ª± c·ªë: H·ªá th·ªëng ph√°t hi·ªán v√† ghi nh·∫≠n crash",
                "step4", "üîÑ Recovery: Kh√¥i ph·ª•c t·ª´ backup + redo c√°c commit sau checkpoint"
            ),
            
            "advantages", Map.of(
                "simplicity", "ƒê∆°n gi·∫£n, d·ªÖ hi·ªÉu v√† d·ªÖ implement",
                "speed", "Recovery nhanh ch√≥ng (ch·ªâ restore + redo)",
                "reliability", "Backup ƒë·∫ßy ƒë·ªß ƒë·∫£m b·∫£o an to√†n d·ªØ li·ªáu",
                "maintenance", "√çt ph·ª©c t·∫°p trong b·∫£o tr√¨ v√† troubleshooting"
            ),
            
            "trade_offs", Map.of(
                "storage", "C·∫ßn nhi·ªÅu dung l∆∞·ª£ng cho full backup",
                "rpo", "RPO ph·ª• thu·ªôc v√†o t·∫ßn su·∫•t t·∫°o checkpoint",
                "data_loss", "C√≥ th·ªÉ m·∫•t d·ªØ li·ªáu t·ª´ checkpoint cu·ªëi ƒë·∫øn khi crash"
            ),
            
            "gym_specific_benefits", Map.of(
                "member_data", "B·∫£o v·ªá th√¥ng tin kh√°ch h√†ng v√† th·∫ª th√†nh vi√™n",
                "payment_data", "ƒê·∫£m b·∫£o giao d·ªãch thanh to√°n kh√¥ng b·ªã m·∫•t",
                "service_registration", "Kh√¥i ph·ª•c ƒëƒÉng k√Ω d·ªãch v·ª• v√† l·ªãch t·∫≠p",
                "business_continuity", "Gi·∫£m thi·ªÉu downtime, duy tr√¨ ho·∫°t ƒë·ªông kinh doanh"
            ),
            
            "recommended_schedule", Map.of(
                "peak_hours", "M·ªói 15-30 ph√∫t (17:00-21:00)",
                "normal_hours", "M·ªói 1-2 gi·ªù",
                "maintenance", "Backup ƒë·∫ßy ƒë·ªß h√†ng ng√†y v√†o 2:00 AM"
            ),
            
            "api_endpoints", Map.of(
                "demo", "POST /api/checkpoint/demo - Demo ƒë·∫ßy ƒë·ªß",
                "create", "POST /api/checkpoint/create - T·∫°o checkpoint",
                "recover", "POST /api/checkpoint/recover - Th·ª±c hi·ªán recovery",
                "status", "GET /api/checkpoint/status - Tr·∫°ng th√°i h·ªá th·ªëng",
                "metrics", "GET /api/checkpoint/metrics - Th·ªëng k√™ hi·ªáu su·∫•t"
            )
        ));
    }

    // ==================== PRIVATE SCENARIO METHODS ====================

    private Map<String, Object> runPeakHourScenario() {
        return Map.of(
            "scenario", "üïï Cao ƒëi·ªÉm t·ªëi th·ª© 6",
            "situation", "20 kh√°ch h√†ng ƒëƒÉng k√Ω d·ªãch v·ª• ƒë·ªìng th·ªùi l√∫c 18:30",
            "timeline", Map.of(
                "18:20", "T·∫°o checkpoint tr∆∞·ªõc gi·ªù cao ƒëi·ªÉm",
                "18:25", "Kh√°ch h√†ng b·∫Øt ƒë·∫ßu ƒëƒÉng k√Ω massively", 
                "18:35", "‚ö° M·∫•t ƒëi·ªán ƒë·ªôt ng·ªôt do qu√° t·∫£i",
                "18:40", "Ph√°t hi·ªán s·ª± c·ªë, b·∫Øt ƒë·∫ßu recovery",
                "18:43", "Recovery ho√†n t·∫•t t·ª´ checkpoint 18:20"
            ),
            "result", Map.of(
                "recovered_registrations", 15,
                "lost_registrations", 5,
                "downtime", "3 ph√∫t",
                "customer_impact", "5 kh√°ch h√†ng c·∫ßn ƒëƒÉng k√Ω l·∫°i"
            ),
            "lesson", "Checkpoint th∆∞·ªùng xuy√™n trong gi·ªù cao ƒëi·ªÉm r·∫•t quan tr·ªçng"
        );
    }

    private Map<String, Object> runPaymentScenario() {
        return Map.of(
            "scenario", "üí≥ S·ª± c·ªë thanh to√°n",
            "situation", "H·ªá th·ªëng crash khi ƒëang x·ª≠ l√Ω nhi·ªÅu giao d·ªãch thanh to√°n",
            "timeline", Map.of(
                "14:00", "Checkpoint t·∫°o sau gi·ªù tr∆∞a",
                "14:30", "Nhi·ªÅu kh√°ch thanh to√°n g√≥i t·∫≠p v√† PT",
                "14:45", "üîÑ System crash khi x·ª≠ l√Ω payment gateway",
                "14:48", "Recovery ƒë∆∞·ª£c k√≠ch ho·∫°t t·ª± ƒë·ªông",
                "14:52", "T·∫•t c·∫£ thanh to√°n ƒë∆∞·ª£c verify v√† restore"
            ),
            "result", Map.of(
                "payments_recovered", 12,
                "payments_verified", 12,
                "no_double_charge", true,
                "customer_satisfaction", "100%"
            ),
            "lesson", "Checkpoint b·∫£o v·ªá t·ªët d·ªØ li·ªáu t√†i ch√≠nh quan tr·ªçng"
        );
    }

    private Map<String, Object> runMaintenanceScenario() {
        return Map.of(
            "scenario", "üîß B·∫£o tr√¨ h·ªá th·ªëng",
            "situation", "N√¢ng c·∫•p database trong gi·ªù √≠t kh√°ch",
            "timeline", Map.of(
                "02:00", "T·∫°o checkpoint tr∆∞·ªõc b·∫£o tr√¨",
                "02:05", "B·∫Øt ƒë·∫ßu upgrade database schema",
                "02:30", "‚ùå Upgrade th·∫•t b·∫°i, c·∫ßn rollback",
                "02:35", "Recovery v·ªÅ checkpoint 02:00",
                "02:40", "H·ªá th·ªëng ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
            ),
            "result", Map.of(
                "rollback_time", "5 ph√∫t",
                "data_integrity", "100%", 
                "zero_data_loss", true,
                "business_impact", "Kh√¥ng ·∫£nh h∆∞·ªüng (gi·ªù ƒë√≥ng c·ª≠a)"
            ),
            "lesson", "Checkpoint l√† safety net ho√†n h·∫£o cho maintenance"
        );
    }
} 