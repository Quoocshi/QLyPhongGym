package hahaha.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import hahaha.model.ChiTietDangKyDichVu;
import hahaha.model.CaTap;
import hahaha.model.KhachHang;
import hahaha.model.KhuVuc;
import hahaha.model.LichTap;
import hahaha.model.NhanVien;
import hahaha.repository.ChiTietDangKyDichVuRepository;
import hahaha.repository.CaTapRepository;
import hahaha.repository.KhachHangRepository;
import hahaha.repository.KhuVucRepository;
import hahaha.repository.LichTapRepository;
import hahaha.repository.NhanVienRepository;

@Service
@Transactional
public class LichTapServiceImpl implements LichTapService {
    
    @Autowired
    private LichTapRepository lichTapRepository;
    
    @Autowired
    private ChiTietDangKyDichVuRepository chiTietDangKyDichVuRepository;
    
    @Autowired
    private NhanVienRepository nhanVienRepository;
    
    @Autowired
    private KhachHangRepository khachHangRepository;
    
    @Autowired
    private CaTapRepository caTapRepository;
    
    @Autowired
    private KhuVucRepository khuVucRepository;
    
    @Override
    public List<LichTap> getLichTapByKhachHang(String maKH) {
        return lichTapRepository.findByKhachHang_MaKH(maKH);
    }
    
    @Override
    public List<LichTap> getLichTapByKhachHangAndLoai(String maKH, String loaiLich) {
        return lichTapRepository.findByKhachHang_MaKHAndLoaiLich(maKH, loaiLich);
    }
    
    @Override
    public List<LichTap> getAllLichTapByKhachHang(String maKH) {
        List<LichTap> allSchedules = new ArrayList<>();
        
        // L·∫•y l·ªãch PT c·ªßa kh√°ch h√†ng
        List<LichTap> ptSchedules = lichTapRepository.findPTScheduleByKhachHang(maKH);
        if (ptSchedules != null) {
            allSchedules.addAll(ptSchedules);
        }
        
        // L·∫•y l·ªãch l·ªõp m√† kh√°ch h√†ng ƒë√£ ƒëƒÉng k√Ω
        List<LichTap> classSchedules = lichTapRepository.findClassScheduleByKhachHang(maKH);
        if (classSchedules != null) {
            allSchedules.addAll(classSchedules);
        }
        
        return allSchedules;
    }
    
    @Override
    public List<ChiTietDangKyDichVu> getPTCustomersByTrainer(String maNV) {
        return chiTietDangKyDichVuRepository.findPTCustomersByTrainer(maNV);
    }
    
    @Override
    public List<LichTap> getPTScheduleByTrainer(String maNV) {
        return lichTapRepository.findPTScheduleByTrainer(maNV);
    }
    
    @Override
    public LichTap createPTSchedule(String maNV, String maKH, String thu, String caTap, String maKV) {
        try {
            // Ki·ªÉm tra xung ƒë·ªôt l·ªãch
            if (hasScheduleConflict(maNV, thu, caTap)) {
                System.out.println("Xung ƒë·ªôt l·ªãch: Trainer " + maNV + " ƒë√£ c√≥ l·ªãch v√†o " + thu + " ca " + caTap);
                return null;
            }
            
            // T·∫°o l·ªãch t·∫≠p m·ªõi
            LichTap lichTap = new LichTap();
            lichTap.setMaLT(generateNextMaLT());
            lichTap.setLoaiLich("PT");
            lichTap.setThu(thu);
            lichTap.setTrangThai("Dang mo");
            
            // Set trainer
            NhanVien trainer = nhanVienRepository.findById(maNV).orElse(null);
            if (trainer == null) {
                System.out.println("Kh√¥ng t√¨m th·∫•y trainer: " + maNV);
                return null;
            }
            lichTap.setNhanVien(trainer);
            
            // Set kh√°ch h√†ng
            KhachHang khachHang = khachHangRepository.findById(maKH).orElse(null);
            if (khachHang == null) {
                System.out.println("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng: " + maKH);
                return null;
            }
            lichTap.setKhachHang(khachHang);
            
            // Set ca t·∫≠p
            CaTap ca = caTapRepository.findById(caTap).orElse(null);
            if (ca == null) {
                System.out.println("Kh√¥ng t√¨m th·∫•y ca t·∫≠p: " + caTap);
                return null;
            }
            lichTap.setCaTap(ca);
            
            // Set khu v·ª±c (optional)
            if (maKV != null && !maKV.isEmpty()) {
                KhuVuc khuVuc = khuVucRepository.findById(maKV).orElse(null);
                if (khuVuc != null) {
                    lichTap.setKhuVuc(khuVuc);
                }
            }
            
            return lichTapRepository.save(lichTap);
            
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫°o l·ªãch PT: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    @Override
    public boolean hasScheduleConflict(String maNV, String thu, String caTap) {
        Long count = lichTapRepository.countConflictingSchedules(maNV, caTap, thu);
        return count != null && count > 0;
    }
    
    /**
     * T·∫°o m√£ l·ªãch t·∫≠p ti·∫øp theo
     */
    @Override
    public String generateNextMaLT() {
        Integer maxNumber = lichTapRepository.findMaxLichTapNumber();
        int nextNumber = (maxNumber != null) ? maxNumber + 1 : 1;
        return String.format("LT%03d", nextNumber);
    }
    
    /**
     * T·∫°o m√£ l·ªãch t·∫≠p ti·∫øp theo v·ªõi logging
     */
    private String generateNextMaLTWithLogging() {
        try {
            System.out.println("üîß Generating next MaLT...");
            String lastMaLT = lichTapRepository.findLastMaLT();
            System.out.println("Last MaLT from database: " + lastMaLT);
            
            if (lastMaLT == null || lastMaLT.isEmpty()) {
                System.out.println("No existing MaLT found, starting with LT001");
                return "LT001";
            }
            
            // L·∫•y s·ªë t·ª´ m√£ cu·ªëi c√πng (VD: LT025 -> 25)
            String numberPart = lastMaLT.substring(2);
            System.out.println("Number part extracted: " + numberPart);
            
            int nextNumber = Integer.parseInt(numberPart) + 1;
            System.out.println("Next number: " + nextNumber);
            
            String nextMaLT = String.format("LT%03d", nextNumber);
            System.out.println("Generated next MaLT: " + nextMaLT);
            
            return nextMaLT;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o m√£ l·ªãch t·∫≠p: " + e.getMessage());
            e.printStackTrace();
            // Fallback: t·∫°o m√£ ng·∫´u nhi√™n
            String fallbackMaLT = "LT" + System.currentTimeMillis() % 1000;
            System.out.println("Using fallback MaLT: " + fallbackMaLT);
            return fallbackMaLT;
        }
    }
    
    @Override
    public LichTap createPTScheduleWithDate(String maNV, String maKH, String ngayTap, String caTap, String maKV) {
        try {
            System.out.println("=== T·∫†O L·ªäCH PT V·ªöI NG√ÄY C·ª§ TH·ªÇ ===");
            System.out.println("Trainer: " + maNV);
            System.out.println("Kh√°ch h√†ng: " + maKH);
            System.out.println("Ng√†y t·∫≠p: " + ngayTap);
            System.out.println("Ca t·∫≠p: " + caTap);
            System.out.println("Khu v·ª±c: " + maKV);
            
            // Chuy·ªÉn ƒë·ªïi ng√†y t·ª´ yyyy-MM-dd sang dd/MM/yyyy ƒë·ªÉ l∆∞u v√†o c·ªôt Thu
            String ngayTapFormatted = convertDateFormat(ngayTap);
            System.out.println("Ng√†y t·∫≠p formatted: " + ngayTapFormatted);
            
            // Ki·ªÉm tra xung ƒë·ªôt l·ªãch cho ng√†y c·ª• th·ªÉ
            System.out.println("üîç Ki·ªÉm tra xung ƒë·ªôt l·ªãch...");
            if (hasScheduleConflictForDate(maNV, ngayTapFormatted, caTap)) {
                System.out.println("‚ùå Xung ƒë·ªôt l·ªãch: Trainer " + maNV + " ƒë√£ c√≥ l·ªãch v√†o " + ngayTapFormatted + " ca " + caTap);
                return null;
            }
            System.out.println("‚úÖ Kh√¥ng c√≥ xung ƒë·ªôt l·ªãch");
            
            // Ki·ªÉm tra ng√†y t·∫≠p c√≥ n·∫±m trong th·ªùi h·∫°n PT c·ªßa kh√°ch h√†ng kh√¥ng
            System.out.println("üîç Ki·ªÉm tra th·ªùi h·∫°n PT...");
            if (!isDateWithinPTPeriod(maKH, ngayTap)) {
                System.out.println("‚ùå Ng√†y t·∫≠p kh√¥ng n·∫±m trong th·ªùi h·∫°n PT c·ªßa kh√°ch h√†ng");
                return null;
            }
            System.out.println("‚úÖ Ng√†y t·∫≠p h·ª£p l·ªá");
            
            // T·∫°o l·ªãch t·∫≠p m·ªõi
            System.out.println("üîß T·∫°o ƒë·ªëi t∆∞·ª£ng LichTap...");
            LichTap lichTap = new LichTap();
            
            String maLT = generateNextMaLTWithLogging();
            lichTap.setMaLT(maLT);
            lichTap.setLoaiLich("PT");
            lichTap.setThu(ngayTapFormatted); // L∆∞u ng√†y d∆∞·ªõi d·∫°ng dd/MM/yyyy
            lichTap.setTrangThai("Dang mo");
            
            // Set trainer
            System.out.println("üîç T√¨m trainer: " + maNV);
            NhanVien trainer = nhanVienRepository.findById(maNV).orElse(null);
            if (trainer == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y trainer: " + maNV);
                return null;
            }
            System.out.println("‚úÖ T√¨m th·∫•y trainer: " + trainer.getTenNV());
            lichTap.setNhanVien(trainer);
            
            // Set kh√°ch h√†ng
            System.out.println("üîç T√¨m kh√°ch h√†ng: " + maKH);
            KhachHang khachHang = khachHangRepository.findById(maKH).orElse(null);
            if (khachHang == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng: " + maKH);
                return null;
            }
            System.out.println("‚úÖ T√¨m th·∫•y kh√°ch h√†ng: " + khachHang.getHoTen());
            lichTap.setKhachHang(khachHang);
            
            // Set ca t·∫≠p
            System.out.println("üîç T√¨m ca t·∫≠p: " + caTap);
            CaTap ca = caTapRepository.findById(caTap).orElse(null);
            if (ca == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y ca t·∫≠p: " + caTap);
                return null;
            }
            System.out.println("‚úÖ T√¨m th·∫•y ca t·∫≠p: " + ca.getTenCa());
            lichTap.setCaTap(ca);
            
            // Set khu v·ª±c (optional)
            if (maKV != null && !maKV.isEmpty()) {
                System.out.println("üîç T√¨m khu v·ª±c: " + maKV);
                KhuVuc khuVuc = khuVucRepository.findById(maKV).orElse(null);
                if (khuVuc != null) {
                    System.out.println("‚úÖ T√¨m th·∫•y khu v·ª±c: " + khuVuc.getTenKhuVuc());
                    lichTap.setKhuVuc(khuVuc);
                } else {
                    System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y khu v·ª±c: " + maKV);
                }
            } else {
                System.out.println("‚ÑπÔ∏è Kh√¥ng ch·ªçn khu v·ª±c");
            }
            
            // Debug th√¥ng tin tr∆∞·ªõc khi save
            System.out.println("üìã Th√¥ng tin LichTap tr∆∞·ªõc khi save:");
            System.out.println("  - MaLT: " + lichTap.getMaLT());
            System.out.println("  - LoaiLich: " + lichTap.getLoaiLich());
            System.out.println("  - Thu: " + lichTap.getThu());
            System.out.println("  - TrangThai: " + lichTap.getTrangThai());
            System.out.println("  - Trainer: " + (lichTap.getNhanVien() != null ? lichTap.getNhanVien().getMaNV() : "null"));
            System.out.println("  - KhachHang: " + (lichTap.getKhachHang() != null ? lichTap.getKhachHang().getMaKH() : "null"));
            System.out.println("  - CaTap: " + (lichTap.getCaTap() != null ? lichTap.getCaTap().getMaCa() : "null"));
            System.out.println("  - KhuVuc: " + (lichTap.getKhuVuc() != null ? lichTap.getKhuVuc().getMaKV() : "null"));
            
            // L∆∞u v√†o database
            System.out.println("üíæ ƒêang l∆∞u v√†o database...");
            LichTap savedLichTap = lichTapRepository.save(lichTap);
            
            if (savedLichTap != null) {
                System.out.println("‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng l·ªãch t·∫≠p: " + savedLichTap.getMaLT() + " v·ªõi ng√†y: " + savedLichTap.getThu());
                
                // Verify b·∫±ng c√°ch query l·∫°i
                System.out.println("üîç Verify b·∫±ng c√°ch query l·∫°i...");
                LichTap verifyLichTap = lichTapRepository.findById(savedLichTap.getMaLT()).orElse(null);
                if (verifyLichTap != null) {
                    System.out.println("‚úÖ Verify th√†nh c√¥ng: T√¨m th·∫•y l·ªãch t·∫≠p " + verifyLichTap.getMaLT() + " trong database");
                } else {
                    System.out.println("‚ùå Verify th·∫•t b·∫°i: Kh√¥ng t√¨m th·∫•y l·ªãch t·∫≠p trong database");
                }
                
                return savedLichTap;
            } else {
                System.out.println("‚ùå L∆∞u th·∫•t b·∫°i: savedLichTap is null");
                return null;
            }
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o l·ªãch PT v·ªõi ng√†y c·ª• th·ªÉ: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }
    
    /**
     * Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y t·ª´ yyyy-MM-dd sang dd/MM/yyyy
     */
    private String convertDateFormat(String dateString) {
        try {
            java.time.LocalDate date = java.time.LocalDate.parse(dateString);
            java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy");
            return date.format(formatter);
        } catch (Exception e) {
            System.err.println("L·ªói chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y: " + e.getMessage());
            return dateString;
        }
    }
    
    /**
     * Ki·ªÉm tra xung ƒë·ªôt l·ªãch cho ng√†y c·ª• th·ªÉ
     */
    private boolean hasScheduleConflictForDate(String maNV, String ngayTap, String caTap) {
        Long count = lichTapRepository.countConflictingSchedulesForDate(maNV, caTap, ngayTap);
        return count != null && count > 0;
    }
    
    /**
     * Ki·ªÉm tra ng√†y t·∫≠p c√≥ n·∫±m trong th·ªùi h·∫°n PT c·ªßa kh√°ch h√†ng kh√¥ng
     */
    private boolean isDateWithinPTPeriod(String maKH, String ngayTap) {
        try {
            System.out.println("üîç Ki·ªÉm tra th·ªùi h·∫°n PT cho kh√°ch h√†ng: " + maKH + ", ng√†y: " + ngayTap);
            java.time.LocalDate selectedDate = java.time.LocalDate.parse(ngayTap);
            System.out.println("Selected date parsed: " + selectedDate);
            
            // L·∫•y th√¥ng tin PT c·ªßa kh√°ch h√†ng
            List<ChiTietDangKyDichVu> ptServices = chiTietDangKyDichVuRepository.findPTCustomersByCustomer(maKH);
            System.out.println("S·ªë d·ªãch v·ª• PT c·ªßa kh√°ch h√†ng: " + (ptServices != null ? ptServices.size() : "null"));
            
            if (ptServices == null || ptServices.isEmpty()) {
                System.out.println("‚ùå Kh√°ch h√†ng ch∆∞a ƒëƒÉng k√Ω d·ªãch v·ª• PT n√†o");
                return false;
            }
            
            for (ChiTietDangKyDichVu pt : ptServices) {
                System.out.println("Ki·ªÉm tra d·ªãch v·ª• PT: " + pt.getMaCTDK());
                System.out.println("  - Ng√†y b·∫Øt ƒë·∫ßu: " + pt.getNgayBD());
                System.out.println("  - Ng√†y k·∫øt th√∫c: " + pt.getNgayKT());
                System.out.println("  - D·ªãch v·ª•: " + (pt.getDichVu() != null ? pt.getDichVu().getTenDV() : "null"));
                System.out.println("  - Tr·∫°ng th√°i Hƒê: " + (pt.getHoaDon() != null ? pt.getHoaDon().getTrangThai() : "null"));
                
                java.time.LocalDate startDate = pt.getNgayBD().toLocalDate();
                java.time.LocalDate endDate = pt.getNgayKT().toLocalDate();
                
                System.out.println("  - Start date: " + startDate);
                System.out.println("  - End date: " + endDate);
                System.out.println("  - Selected date: " + selectedDate);
                System.out.println("  - Is after start: " + !selectedDate.isBefore(startDate));
                System.out.println("  - Is before end: " + !selectedDate.isAfter(endDate));
                
                if (!selectedDate.isBefore(startDate) && !selectedDate.isAfter(endDate)) {
                    System.out.println("‚úÖ Ng√†y " + selectedDate + " n·∫±m trong kho·∫£ng th·ªùi gian PT: " + startDate + " - " + endDate);
                    return true; // Ng√†y n·∫±m trong kho·∫£ng th·ªùi gian PT
                } else {
                    System.out.println("‚ö†Ô∏è Ng√†y " + selectedDate + " KH√îNG n·∫±m trong kho·∫£ng th·ªùi gian PT: " + startDate + " - " + endDate);
                }
            }
            
            System.out.println("‚ùå Ng√†y " + selectedDate + " kh√¥ng n·∫±m trong b·∫•t k·ª≥ kho·∫£ng th·ªùi gian PT n√†o");
            return false;
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói ki·ªÉm tra th·ªùi h·∫°n PT: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }
} 