-- =====================================================================================
-- HỆ THỐNG CHECKPOINT RECOVERY CHO QUẢN LÝ PHÒNG GYM
-- True Checkpoint Recovery: Khôi phục về CHÍNH XÁC trạng thái tại thời điểm checkpoint
-- Data sau checkpoint sẽ BỊ MẤT (đây là hành vi đúng đắn của checkpoint)
-- =====================================================================================

-- =====================================================================================
-- PHẦN 1: THIẾT LẬP CẤU TRÚC CHECKPOINT
-- =====================================================================================

-- Bảng lưu trữ thông tin checkpoint
CREATE TABLE GYM_CHECKPOINT (
    CheckpointID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CheckpointTime DATE DEFAULT SYSDATE,
    TotalCustomers NUMBER,
    TotalServices NUMBER,
    TotalInvoices NUMBER,
    TotalRevenue NUMBER,
    SystemStatus VARCHAR2(20) DEFAULT 'STABLE',
    Description VARCHAR2(200)
);

-- Bảng backup dữ liệu quan trọng
CREATE TABLE BACKUP_KHACHHANG AS SELECT * FROM KHACHHANG WHERE 1=0;
CREATE TABLE BACKUP_DICHVU AS SELECT * FROM DICHVU WHERE 1=0;
CREATE TABLE BACKUP_HOADON AS SELECT * FROM HOADON WHERE 1=0;
CREATE TABLE BACKUP_CT_DKDV AS SELECT * FROM CT_DKDV WHERE 1=0;
CREATE TABLE BACKUP_ACCOUNT AS SELECT * FROM ACCOUNT WHERE 1=0;

-- Bảng log đơn giản để tracking (chỉ để monitoring, không dùng cho recovery)
CREATE TABLE CHECKPOINT_LOG (
    LogID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EventType VARCHAR2(30), -- CHECKPOINT_CREATED, RECOVERY_STARTED, RECOVERY_COMPLETED
    EventTime DATE DEFAULT SYSDATE,
    CheckpointID NUMBER,
    Description VARCHAR2(200)
);

-- =====================================================================================
-- PHẦN 2: PROCEDURE TẠO CHECKPOINT
-- =====================================================================================

CREATE OR REPLACE PROCEDURE create_gym_checkpoint(
    p_checkpoint_id OUT NUMBER,
    p_message OUT VARCHAR2
)
AS
    v_customers NUMBER;
    v_services NUMBER;
    v_invoices NUMBER;
    v_revenue NUMBER;
BEGIN
    -- Thu thập thống kê hệ thống
    SELECT COUNT(*) INTO v_customers FROM KHACHHANG;
    SELECT COUNT(*) INTO v_services FROM DICHVU;
    SELECT COUNT(*) INTO v_invoices FROM HOADON;
    SELECT NVL(SUM(TongTien), 0) INTO v_revenue FROM HOADON WHERE TrangThai = 'DaThanhToan';
    
    -- Tạo backup đầy đủ
    DELETE FROM BACKUP_KHACHHANG;
    INSERT INTO BACKUP_KHACHHANG SELECT * FROM KHACHHANG;
    
    DELETE FROM BACKUP_DICHVU;
    INSERT INTO BACKUP_DICHVU SELECT * FROM DICHVU;
    
    DELETE FROM BACKUP_HOADON;
    INSERT INTO BACKUP_HOADON SELECT * FROM HOADON;
    
    DELETE FROM BACKUP_CT_DKDV;
    INSERT INTO BACKUP_CT_DKDV SELECT * FROM CT_DKDV;
    
    DELETE FROM BACKUP_ACCOUNT;
    INSERT INTO BACKUP_ACCOUNT SELECT * FROM ACCOUNT;
    
    -- Tạo checkpoint record
    INSERT INTO GYM_CHECKPOINT (
        TotalCustomers, TotalServices, TotalInvoices, TotalRevenue, 
        SystemStatus, Description
    ) VALUES (
        v_customers, v_services, v_invoices, v_revenue,
        'STABLE', 'Checkpoint created with ' || v_customers || ' customers, ' || v_invoices || ' invoices'
    ) RETURNING CheckpointID INTO p_checkpoint_id;
    
    -- Log checkpoint creation
    INSERT INTO CHECKPOINT_LOG (EventType, CheckpointID, Description)
    VALUES ('CHECKPOINT_CREATED', p_checkpoint_id, 'Full backup completed');
    
    COMMIT;
    
    p_message := 'Checkpoint ' || p_checkpoint_id || ' created successfully at ' || 
                 TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS');
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        p_checkpoint_id := NULL;
        p_message := 'Error creating checkpoint: ' || SQLERRM;
END;
/

-- =====================================================================================
-- PHẦN 3: PROCEDURE CHECKPOINT RECOVERY (TRUE CHECKPOINT - CHỈ UNDO)
-- =====================================================================================

CREATE OR REPLACE PROCEDURE gym_checkpoint_recovery(
    p_target_checkpoint_id IN NUMBER DEFAULT NULL,
    p_recovery_status OUT VARCHAR2,
    p_recovery_details OUT VARCHAR2
)
AS
    v_checkpoint_id NUMBER;
    v_checkpoint_time DATE;
    v_start_time DATE := SYSDATE;
    v_end_time DATE;
    
BEGIN
    -- Xác định checkpoint để restore
    IF p_target_checkpoint_id IS NULL THEN
        SELECT CheckpointID, CheckpointTime INTO v_checkpoint_id, v_checkpoint_time
        FROM GYM_CHECKPOINT
        WHERE SystemStatus = 'STABLE'
        ORDER BY CheckpointTime DESC
        FETCH FIRST 1 ROWS ONLY;
    ELSE
        SELECT CheckpointID, CheckpointTime INTO v_checkpoint_id, v_checkpoint_time
        FROM GYM_CHECKPOINT
        WHERE CheckpointID = p_target_checkpoint_id;
    END IF;
    
    IF v_checkpoint_id IS NULL THEN
        p_recovery_status := 'ERROR';
        p_recovery_details := 'No valid checkpoint found';
        RETURN;
    END IF;
    
    -- Ghi nhận bắt đầu recovery
    INSERT INTO GYM_CHECKPOINT (SystemStatus, Description)
    VALUES ('RECOVERY_IN_PROGRESS', 'Starting checkpoint recovery from checkpoint ' || v_checkpoint_id);
    
    INSERT INTO CHECKPOINT_LOG (EventType, CheckpointID, Description)
    VALUES ('RECOVERY_STARTED', v_checkpoint_id, 'Restoring to checkpoint ' || v_checkpoint_id);
    
    -- CHECKPOINT RECOVERY: Chỉ khôi phục từ backup (UNDO)
    BEGIN
        -- Tạm thời disable tất cả các constraint để tránh lỗi
        EXECUTE IMMEDIATE 'ALTER TABLE CT_DKDV DISABLE CONSTRAINT FK_CT_DKDV_HOADON';
        EXECUTE IMMEDIATE 'ALTER TABLE CT_DKDV DISABLE CONSTRAINT FK_CT_DKDV_DICHVU';
        EXECUTE IMMEDIATE 'ALTER TABLE HOADON DISABLE CONSTRAINT FK_HOADON_KHACHHANG';
        EXECUTE IMMEDIATE 'ALTER TABLE ACCOUNT DISABLE CONSTRAINT FK_ACCOUNT_KHACHHANG';
        
        -- Xóa dữ liệu hiện tại theo thứ tự đúng (bảng con -> bảng cha)
        DELETE FROM CT_DKDV;
        DELETE FROM ACCOUNT;
        DELETE FROM HOADON;
        DELETE FROM KHACHHANG;
        DELETE FROM DICHVU;
        
        -- Chèn dữ liệu từ backup theo thứ tự đúng (bảng cha -> bảng con)
        INSERT INTO KHACHHANG SELECT * FROM BACKUP_KHACHHANG;
        INSERT INTO DICHVU SELECT * FROM BACKUP_DICHVU;
        INSERT INTO HOADON SELECT * FROM BACKUP_HOADON;
        INSERT INTO ACCOUNT SELECT * FROM BACKUP_ACCOUNT;
        INSERT INTO CT_DKDV SELECT * FROM BACKUP_CT_DKDV;

        -- Re-enable tất cả constraints
        EXECUTE IMMEDIATE 'ALTER TABLE CT_DKDV ENABLE CONSTRAINT FK_CT_DKDV_HOADON';
        EXECUTE IMMEDIATE 'ALTER TABLE CT_DKDV ENABLE CONSTRAINT FK_CT_DKDV_DICHVU';
        EXECUTE IMMEDIATE 'ALTER TABLE HOADON ENABLE CONSTRAINT FK_HOADON_KHACHHANG';
        EXECUTE IMMEDIATE 'ALTER TABLE ACCOUNT ENABLE CONSTRAINT FK_ACCOUNT_KHACHHANG';
        
    EXCEPTION
        WHEN OTHERS THEN
            DECLARE
                v_error_msg VARCHAR2(500);
            BEGIN
                v_error_msg := SQLERRM;
                p_recovery_status := 'ERROR';
                p_recovery_details := 'Backup restore failed: ' || SUBSTR(v_error_msg, 1, 800);
                ROLLBACK;
                RETURN;
            END;
    END;
    
    v_end_time := SYSDATE;
    
    -- Ghi nhận hoàn thành recovery
    INSERT INTO GYM_CHECKPOINT (SystemStatus, Description)
    VALUES ('RECOVERY_COMPLETED', 
            'Checkpoint recovery completed. System restored to checkpoint ' || v_checkpoint_id || 
            ' at ' || TO_CHAR(v_checkpoint_time, 'YYYY-MM-DD HH24:MI:SS') ||
            '. Duration: ' || ROUND((v_end_time - v_start_time) * 24 * 60, 2) || ' minutes');
    
    INSERT INTO CHECKPOINT_LOG (EventType, CheckpointID, Description)
    VALUES ('RECOVERY_COMPLETED', v_checkpoint_id, 'Successfully restored to checkpoint state');
    
    COMMIT;
    
    p_recovery_status := 'SUCCESS';
    p_recovery_details := 'Successfully restored to checkpoint ' || v_checkpoint_id || ' (' || 
                         TO_CHAR(v_checkpoint_time, 'YYYY-MM-DD HH24:MI:SS') || '). ' ||
                         'ALL DATA AFTER CHECKPOINT HAS BEEN LOST (this is correct behavior). ' ||
                         'Recovery time: ' || ROUND((v_end_time - v_start_time) * 24 * 60, 2) || ' minutes';
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DECLARE
            v_error_msg VARCHAR2(500);
        BEGIN
            v_error_msg := SQLERRM;
            p_recovery_status := 'ERROR';
            p_recovery_details := 'Recovery failed: ' || SUBSTR(v_error_msg, 1, 900);
            
            INSERT INTO GYM_CHECKPOINT (SystemStatus, Description)
            VALUES ('RECOVERY_FAILED', 'Recovery failed: ' || SUBSTR(v_error_msg, 1, 150));
            COMMIT;
        END;
END;
/

-- =====================================================================================
-- PHẦN 4: MONITORING VÀ BÁO CÁO
-- =====================================================================================

-- View theo dõi checkpoint
CREATE OR REPLACE VIEW VW_CHECKPOINT_STATUS AS
SELECT 
    CheckpointID,
    CheckpointTime,
    TotalCustomers,
    TotalInvoices,
    TotalRevenue,
    SystemStatus,
    Description,
    ROUND((SYSDATE - CheckpointTime) * 24, 2) AS HoursAgo
FROM GYM_CHECKPOINT
ORDER BY CheckpointTime DESC;

-- View theo dõi recovery history
CREATE OR REPLACE VIEW VW_RECOVERY_HISTORY AS
SELECT 
    TRUNC(EventTime) AS EventDate,
    COUNT(*) AS EventCount,
    EventType,
    MAX(EventTime) AS LastEventTime
FROM CHECKPOINT_LOG
GROUP BY TRUNC(EventTime), EventType
ORDER BY EventDate DESC, EventType;

-- Procedure tự động tạo checkpoint theo lịch
CREATE OR REPLACE PROCEDURE auto_checkpoint_schedule
AS
    v_last_checkpoint_time DATE;
    v_checkpoint_id NUMBER;
    v_message VARCHAR2(500);
BEGIN
    -- Kiểm tra checkpoint cuối cùng
    SELECT MAX(CheckpointTime) INTO v_last_checkpoint_time
    FROM GYM_CHECKPOINT
    WHERE SystemStatus = 'STABLE';
    
    -- Tạo checkpoint mới nếu checkpoint cuối > 30 phút
    IF v_last_checkpoint_time IS NULL OR v_last_checkpoint_time < SYSDATE - INTERVAL '30' MINUTE THEN
        create_gym_checkpoint(v_checkpoint_id, v_message);
        
        -- Log auto checkpoint
        INSERT INTO CHECKPOINT_LOG (EventType, CheckpointID, Description)
        VALUES ('AUTO_CHECKPOINT', v_checkpoint_id, 'Scheduled checkpoint created');
        COMMIT;
    END IF;
END;
/

-- =====================================================================================
-- Xem báo cáo checkpoint
-- =====================================================================================
SELECT * FROM VW_CHECKPOINT_STATUS;
SELECT * FROM VW_RECOVERY_HISTORY;

-- =====================================================================================
-- OPTIONAL: SIMPLIFIED TRIGGERS (chỉ để monitoring, không ảnh hưởng recovery)
-- =====================================================================================

-- Simple activity logging trigger for KHACHHANG (optional)
CREATE OR REPLACE TRIGGER TRG_KHACHHANG_ACTIVITY
AFTER INSERT OR UPDATE OR DELETE ON KHACHHANG
FOR EACH ROW
BEGIN
    -- Chỉ ghi log đơn giản cho monitoring, không ảnh hưởng recovery
    IF INSERTING THEN
        INSERT INTO CHECKPOINT_LOG (EventType, Description)
        VALUES ('DATA_CHANGE', 'Customer ' || :NEW.MaKH || ' added');
    ELSIF UPDATING THEN
        INSERT INTO CHECKPOINT_LOG (EventType, Description)
        VALUES ('DATA_CHANGE', 'Customer ' || :NEW.MaKH || ' updated');
    ELSIF DELETING THEN
        INSERT INTO CHECKPOINT_LOG (EventType, Description)
        VALUES ('DATA_CHANGE', 'Customer ' || :OLD.MaKH || ' deleted');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Không được để trigger gây lỗi cho transaction chính
        NULL;
END;
/

