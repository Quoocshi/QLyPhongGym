-- Bảng KHACHHANG
CREATE TABLE KHACHHANG (
    MaKH VARCHAR(10) PRIMARY KEY,
    HoTen VARCHAR(50) NOT NULL,
    NgaySinh DATE,
    GioiTinh VARCHAR(10),
    Email VARCHAR(50) NOT NULL,
    SoDienThoai VARCHAR(15),
    DiaChi VARCHAR(100),
    ReferralCode VARCHAR(20) UNIQUE
);

-- Bảng NHANVIEN
CREATE TABLE NHANVIEN (
    MaNV VARCHAR(10) PRIMARY KEY,
    TenNV VARCHAR(50) NOT NULL,
    NgaySinh DATE,
    GioiTinh VARCHAR(10),
    Email VARCHAR(30) NOT NULL,
    NgayVaoLam DATE,
    LoaiNV VARCHAR(10) CHECK (LoaiNV IN ('Trainer', 'LeTan', 'QuanLy', 'PhongTap'))
);

-- Bảng KHIEUNAI
CREATE TABLE KHIEUNAI (
    MaKN VARCHAR(10) PRIMARY KEY,
    MaKH VARCHAR(10),
    NoiDung VARCHAR(500),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH)
);

-- Bảng BOMON
CREATE TABLE BOMON (
    MaBM VARCHAR(10) PRIMARY KEY,
    TenBM VARCHAR(20) NOT NULL
);

-- Bảng DICHVU
CREATE TABLE DICHVU (
    MaDV VARCHAR(10) PRIMARY KEY,
    TenDV VARCHAR(50) NOT NULL,
    LoaiDV VARCHAR(10) CHECK (LoaiDV IN ('TuDo', 'Lop', 'PT')),
    ThoiHan NUMERIC,
    DonGia NUMERIC,
    MaBM VARCHAR(10),
    version NUMERIC DEFAULT 0,
    FOREIGN KEY (MaBM) REFERENCES BOMON(MaBM)
);

-- Bảng KHUVUC
CREATE TABLE KHUVUC (
    MaKV VARCHAR(10) PRIMARY KEY,
    TenKhuVuc VARCHAR(20) NOT NULL,
    SucChuaToiDa NUMERIC,
    TrangThai VARCHAR(10) CHECK (TrangThai IN ('HoatDong', 'BaoTri')),
    TinhTrang VARCHAR(10) CHECK (TinhTrang IN ('ChuaDay', 'DaDay')),
    MaBM VARCHAR(10),
    FOREIGN KEY (MaBM) REFERENCES BOMON(MaBM)
);

-- Bảng CT_CHECKIN_OUT
CREATE TABLE CT_CHECKIN_OUT (
    MaKH VARCHAR(10),
    MaKV VARCHAR(10),
    TG_IN DATE,
    TG_OUT DATE,
    PRIMARY KEY (MaKH, MaKV),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH),
    FOREIGN KEY (MaKV) REFERENCES KHUVUC(MaKV)
);

-- Bảng LOAITHIETBI
CREATE TABLE LOAITHIETBI (
    MaLoaiTB VARCHAR(10) PRIMARY KEY,
    TenLoaiTB VARCHAR(20) NOT NULL,
    GiaNhap NUMERIC,
    SL_Nhap NUMERIC CHECK (SL_Nhap >= 0),
    SL_Kho NUMERIC CHECK (SL_Kho >= 0),
    MucDich VARCHAR(10) CHECK (MucDich IN ('ChoThue', 'LapDat'))
);

-- Bảng THIETBI
CREATE TABLE THIETBI (
    MaTB VARCHAR(10) PRIMARY KEY,
    TenTB VARCHAR(20) NOT NULL,
    DVT VARCHAR(10) CHECK (DVT IN ('Doi', 'Chiec', 'May')) NOT NULL,
    TinhTrang VARCHAR(20) CHECK (TinhTrang IN ('Hu', 'DangBaoTri', 'DangSuDung')),
    DonGia NUMERIC,
    MoTa VARCHAR(100),
    MaLoaiTB VARCHAR(10),
    MaKV VARCHAR(10),
    FOREIGN KEY (MaLoaiTB) REFERENCES LOAITHIETBI(MaLoaiTB),
    FOREIGN KEY (MaKV) REFERENCES KHUVUC(MaKV)
);

-- Bảng CT_CHUYENMON
CREATE TABLE CT_CHUYENMON (
    MaNV VARCHAR(10),
    MaBM VARCHAR(10),
    GhiChu VARCHAR(50),
    PRIMARY KEY (MaNV, MaBM),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV),
    FOREIGN KEY (MaBM) REFERENCES BOMON(MaBM)
);

-- Bảng LOP
CREATE TABLE LOP (
    MaLop VARCHAR(10) PRIMARY KEY,
    TenLop VARCHAR(80) NOT NULL,
    MoTa VARCHAR(100),
    SL_ToiDa NUMERIC,
    TinhTrang VARCHAR(10) CHECK (TinhTrang IN ('ChuaDay', 'DaDay')),
    NgayBD DATE,
    NgayKT DATE,
    GhiChu VARCHAR(50),
    MaBM VARCHAR(10),
    MaNV VARCHAR(10),
    FOREIGN KEY (MaBM) REFERENCES BOMON(MaBM),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV)
);

-- Bảng VOUCHER
CREATE TABLE VOUCHER (
    MaVC VARCHAR(10) PRIMARY KEY,
    TenVC VARCHAR(30) NOT NULL,
    GiaTri NUMERIC NOT NULL,
    ThoiHan NUMERIC
);

-- Bảng CHUONGTRINHUUDAI
CREATE TABLE CHUONGTRINHUUDAI (
    MaCT VARCHAR(10) PRIMARY KEY,
    TenCT VARCHAR(50) NOT NULL,
    MoTa VARCHAR(100),
    NgayBD DATE,
    NgayKT DATE,
    MaVC VARCHAR(10),
    FOREIGN KEY (MaVC) REFERENCES VOUCHER(MaVC)
);

-- Bảng CT_THAMGIA
CREATE TABLE CT_THAMGIA (
    MaKH VARCHAR(10),
    MaCT VARCHAR(10),
    NgayHT DATE,
    PRIMARY KEY (MaKH, MaCT),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH),
    FOREIGN KEY (MaCT) REFERENCES CHUONGTRINHUUDAI(MaCT)
);

-- Bảng HOADON
CREATE TABLE HOADON (
    MaHD VARCHAR(10) PRIMARY KEY,
    TongTien NUMERIC DEFAULT 0,
    NgayLap DATE DEFAULT CURRENT_DATE,
    TrangThai VARCHAR(50) CHECK (TrangThai IN ('ChuaThanhToan', 'DaThanhToan')),
    NgayTT DATE,
    MaKH VARCHAR(10),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH)
);

-- Bảng KH_VC
CREATE TABLE KH_VC (
    MaCap VARCHAR(10) PRIMARY KEY,
    NgayNhan DATE,
    NgayHetHan DATE,
    MaKH VARCHAR(10),
    MaVC VARCHAR(10),
    MaHD VARCHAR(10),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH),
    FOREIGN KEY (MaVC) REFERENCES VOUCHER(MaVC),
    FOREIGN KEY (MaHD) REFERENCES HOADON(MaHD)
);

-- Bảng CT_DKDV
CREATE TABLE CT_DKDV (
    MaCTDK VARCHAR(10) PRIMARY KEY,
    NgayBD DATE,
    NgayKT DATE,
    MaHD VARCHAR(10),
    MaDV VARCHAR(10),
    MaLop VARCHAR(10),
    MaNV VARCHAR(10),
    FOREIGN KEY (MaHD) REFERENCES HOADON(MaHD),
    FOREIGN KEY (MaDV) REFERENCES DICHVU(MaDV),
    FOREIGN KEY (MaLop) REFERENCES LOP(MaLop),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV)
);

-- Bảng CT_THUEDC
CREATE TABLE CT_THUEDC (
    MaHD VARCHAR(10),
    MaTB VARCHAR(10),
    SL NUMERIC,
    ThoiGianThue DATE,
    ThoiGianTra DATE,
    ThanhTien NUMERIC,
    PRIMARY KEY (MaHD, MaTB),
    FOREIGN KEY (MaHD) REFERENCES HOADON(MaHD),
    FOREIGN KEY (MaTB) REFERENCES THIETBI(MaTB)
);

-- Bảng CATAP
CREATE TABLE CATAP (
    MaCa VARCHAR(10) PRIMARY KEY,
    TenCa VARCHAR(10),
    MoTa VARCHAR(50)
);

-- Bảng LICHTAP
CREATE TABLE LICHTAP (
    MaLT VARCHAR(10) PRIMARY KEY,
    LoaiLich VARCHAR(10) CHECK (LoaiLich IN ('Lop', 'PT')),
    Thu VARCHAR(20),  -- ví dụ: '246' nghĩa là thứ 2, 4, 6
    Ca VARCHAR(10),   -- khung giờ (FK tới CATAP)
    MaLop VARCHAR(10),  -- dùng khi là lịch lớp
    MaKH VARCHAR(10),   -- dùng khi là lịch PT 1-1
    MaNV VARCHAR(10),   -- HLV hoặc GV lớp
    MaKV VARCHAR(10),   -- khu vực tập luyện
    TrangThai VARCHAR(20) DEFAULT 'Dang mo' CHECK (TrangThai IN ('Dang mo', 'Tam dung', 'Huy')),
    FOREIGN KEY (Ca) REFERENCES CATAP(MaCa),
    FOREIGN KEY (MaLop) REFERENCES LOP(MaLop),
    FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV),
    FOREIGN KEY (MaKV) REFERENCES KHUVUC(MaKV)
);

-- Bảng LICHLAMVIEC
CREATE TABLE LICHLAMVIEC (
    MaLLV VARCHAR(10) PRIMARY KEY,
    NgayLam DATE,
    DiemDanh VARCHAR(10) CHECK (DiemDanh IN ('DaLam', 'ChuaLam', 'Vang')),
    Ca VARCHAR(10),
    MaNV VARCHAR(10),
    FOREIGN KEY (Ca) REFERENCES CATAP(MaCa),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV)
);

-- Bảng LUONG
CREATE TABLE LUONG (
    MaLuong VARCHAR(10) PRIMARY KEY,
    LuongCung NUMERIC NOT NULL,
    HoaHong NUMERIC,
    LuongThuong NUMERIC,
    Phat NUMERIC,
    TongLuong NUMERIC,
    NgayNhan DATE,
    MaNV VARCHAR(10),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV)
);

-- Bảng PHIEUBAOTRI
CREATE TABLE PHIEUBAOTRI (
    MaPBT VARCHAR(10) PRIMARY KEY,
    NgayLap DATE,
    NgayBaoTri DATE,
    MaNV VARCHAR(10),
    MaTB VARCHAR(10),
    FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV),
    FOREIGN KEY (MaTB) REFERENCES THIETBI(MaTB)
);

-- 1. Tạo bảng ROLE_GROUP
CREATE TABLE ROLE_GROUP (
    ROLE_GROUP_ID SERIAL PRIMARY KEY,
    NAME_ROLE_GROUP VARCHAR(100) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

-- 2. Tạo bảng ACCOUNT
CREATE TABLE ACCOUNT (
    ACCOUNT_ID SERIAL PRIMARY KEY,
    ROLE_GROUP_ID INTEGER,
    MaKH VARCHAR(10),
    MaNV VARCHAR(10),
    USERNAME VARCHAR(50) NOT NULL UNIQUE,
    PASSWORD_HASH VARCHAR(200) NOT NULL,
    STATUS VARCHAR(20) DEFAULT 'ACTIVE',
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT FK_ACCOUNT_ROLE_GROUP FOREIGN KEY (ROLE_GROUP_ID) REFERENCES ROLE_GROUP(ROLE_GROUP_ID),
    CONSTRAINT FK_ACCOUNT_KHACHHANG FOREIGN KEY (MaKH) REFERENCES KHACHHANG(MaKH),
    CONSTRAINT FK_ACCOUNT_NHANVIEN FOREIGN KEY (MaNV) REFERENCES NHANVIEN(MaNV),
    CONSTRAINT CHK_ONE_REFERENCE CHECK (
        (MaKH IS NOT NULL AND MaNV IS NULL)
        OR (MaKH IS NULL AND MaNV IS NOT NULL)
        OR (MaKH IS NULL AND MaNV IS NULL)
    )
);

-- 3. Tạo bảng FUNCTION
CREATE TABLE FUNCTION (
    FUNCTION_ID SERIAL PRIMARY KEY,
    NAME_FUNCTION VARCHAR(100) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1))
);

-- 4. Tạo bảng ROLE
CREATE TABLE ROLE (
    ROLE_ID SERIAL PRIMARY KEY,
    FUNCTION_ID INTEGER NOT NULL,
    ADD_PERM SMALLINT DEFAULT 0 CHECK (ADD_PERM IN (0,1)),
    EDIT_PERM SMALLINT DEFAULT 0 CHECK (EDIT_PERM IN (0,1)),
    DELETE_PERM SMALLINT DEFAULT 0 CHECK (DELETE_PERM IN (0,1)),
    DOWNLOAD_PERM SMALLINT DEFAULT 0 CHECK (DOWNLOAD_PERM IN (0,1)),
    VIEW_PERM SMALLINT DEFAULT 0 CHECK (VIEW_PERM IN (0,1)),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT FK_ROLE_FUNCTION FOREIGN KEY (FUNCTION_ID) REFERENCES FUNCTION(FUNCTION_ID)
);

-- 5. Tạo bảng ROLE_GROUP_ASSIGN_ROLE
CREATE TABLE ROLE_GROUP_ASSIGN_ROLE (
    ROLE_GROUP_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT PK_ROLE_GROUP_ASSIGN_ROLE PRIMARY KEY (ROLE_GROUP_ID, ROLE_ID),
    CONSTRAINT FK_ROLE_GROUP FOREIGN KEY (ROLE_GROUP_ID) REFERENCES ROLE_GROUP(ROLE_GROUP_ID),
    CONSTRAINT FK_ROLE FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID)
);

-- 6. Tạo bảng ACCOUNT_ASSIGN_ROLE_GROUP
CREATE TABLE ACCOUNT_ASSIGN_ROLE_GROUP (
    ACCOUNT_ID INTEGER NOT NULL,
    ROLE_GROUP_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT PK_ACCOUNT_ASSIGN_ROLE_GROUP PRIMARY KEY (ACCOUNT_ID, ROLE_GROUP_ID),
    CONSTRAINT FK_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
    CONSTRAINT FK_ROLE_GROUP_ASSIGN FOREIGN KEY (ROLE_GROUP_ID) REFERENCES ROLE_GROUP(ROLE_GROUP_ID)
);

-- 7. Tạo bảng ACCOUNT_ASSIGN_ROLE
CREATE TABLE ACCOUNT_ASSIGN_ROLE (
    ACCOUNT_ID INTEGER NOT NULL,
    ROLE_ID INTEGER NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_DELETED SMALLINT DEFAULT 0 CHECK (IS_DELETED IN (0,1)),
    CONSTRAINT PK_ACCOUNT_ASSIGN_ROLE PRIMARY KEY (ACCOUNT_ID, ROLE_ID),
    CONSTRAINT FK_ACCOUNT_ROLE FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID),
    CONSTRAINT FK_ROLE_ASSIGN FOREIGN KEY (ROLE_ID) REFERENCES ROLE(ROLE_ID)
);

-- 8. Tạo bảng ACCOUNT_TOKEN
CREATE TABLE ACCOUNT_TOKEN (
    TOKEN_ID BIGSERIAL PRIMARY KEY,
    ACCOUNT_ID INTEGER NOT NULL,
    TOKEN_VALUE VARCHAR(500) UNIQUE NOT NULL,
    EXPIRES_AT TIMESTAMP NOT NULL,
    ISSUED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    IS_REVOKED CHAR(1) DEFAULT 'N' CHECK (IS_REVOKED IN ('Y','N')),
    CONSTRAINT FK_TOKEN_ACCOUNT FOREIGN KEY (ACCOUNT_ID) REFERENCES ACCOUNT(ACCOUNT_ID)
);
